name: Deploy to AWS EC2

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Run code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.x"

      - name: Create .env file
        run: |
          echo "PORT==${{ secrets.PORT }}" >> .env
          echo "FRONTEND_ORIGIN=${{ secrets.FRONTEND_ORIGIN }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> .env
          echo "CLOUDINARY_KEY=${{ secrets.CLOUDINARY_KEY }}" >> .env
          echo "CLOUDINARY_SECRET=${{ secrets.CLOUDINARY_SECRET }}" >> .env
          echo "ACTIVATION_SECRET=${{ secrets.ACTIVATION_SECRET }}" >> .env
          echo "ACCESS_TOKEN_SIGN_IN=${{ secrets.ACCESS_TOKEN_SIGN_IN }}" >> .env
          echo "REFRESH_TOKEN_SIGN_IN=${{ secrets.REFRESH_TOKEN_SIGN_IN }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE=${{ secrets.ACCESS_TOKEN_EXPIRE }}" >> .env
          echo "REFRESH_TOKEN_EXPIRE=${{ secrets.REFRESH_TOKEN_EXPIRE }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_SERVICE=${{ secrets.SMTP_SERVICE }}" >> .env
          echo "SMTP_MAIL=${{ secrets.SMTP_MAIL }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "VDOCIPHER_API_SECRET=${{ secrets.VDOCIPHER_API_SECRET }}" >> .env
          echo "STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
          echo "LOGGED_IN_TOKEN=${{ secrets.LOGGED_IN_TOKEN }}" >> .env

      - name: Install dependencies
        run: npm install

      - name: Check MongoDB Atlas connectivity
        run: |
          echo "üîç Checking MongoDB Atlas connectivity..."
          node <<EOF
          const mongoose = require('mongoose');
          mongoose.connect(process.env.DB_URL, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
          }).then(() => {
            console.log("‚úÖ Successfully connected to MongoDB Atlas.");
            process.exit(0);
          }).catch((err) => {
            console.error("‚ùå MongoDB Atlas connection failed:", err.message);
            process.exit(1);
          });
          EOF
        env:
          DB_URL: ${{ secrets.DB_URL }}

      - name: Run tests
        run: echo "Skipping tests for now"

      - name: Debug Secrets
        run: |
          echo "Checking if secrets are available..."
          if [[ -z "${{ secrets.RENDER_API_KEY }}" ]]; then
            echo "‚ùå RENDER_API_KEY is missing!"
            exit 1
          else
            echo "‚úÖ RENDER_API_KEY is set!"
          fi

          if [[ -z "${{ secrets.RENDER_SERVICE_ID }}" ]]; then
            echo "‚ùå RENDER_SERVICE_ID is missing!"
            exit 1
          else
            echo "‚úÖ RENDER_SERVICE_ID is set!"
          fi

          if [[ -z "${{ secrets.STRIPE_SECRET_KEY }}" ]]; then
            echo "‚ùå STRIPE_SECRET_KEY is missing!"
            exit 1
          else
            echo "‚úÖ STRIPE_SECRET_KEY is set!"
          fi

          if [[ -z "${{ secrets.PORT}}" ]]; then
            echo "‚ùå PORT is missing!"
            exit 1
          else
            echo "‚úÖ PORT is set!"
          fi

      - name: Build Docker image
        run: docker build -t by-way-server .

      - name: Confirm Successful build
        if: success()
        run: echo "Build job success"

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ~/by-way-server
            git pull origin master
            docker-compose -f docker-compose.server.yml down
            docker-compose -f docker-compose.server.yml up --build -d
