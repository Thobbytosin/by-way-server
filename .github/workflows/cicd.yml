name: Automated CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Run code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.x"

      - name: Create .env file
        run: |
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "ORIGIN=${{ secrets.ORIGIN }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> .env
          echo "CLOUDINARY_KEY=${{ secrets.CLOUDINARY_KEY }}" >> .env
          echo "CLOUDINARY_SECRET=${{ secrets.CLOUDINARY_SECRET }}" >> .env
          echo "ACTIVATION_SECRET=${{ secrets.ACTIVATION_SECRET }}" >> .env
          echo "ACCESS_TOKEN_SIGN_IN=${{ secrets.ACCESS_TOKEN_SIGN_IN }}" >> .env
          echo "REFRESH_TOKEN_SIGN_IN=${{ secrets.REFRESH_TOKEN_SIGN_IN }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE=${{ secrets.ACCESS_TOKEN_EXPIRE }}" >> .env
          echo "REFRESH_TOKEN_EXPIRE=${{ secrets.REFRESH_TOKEN_EXPIRE }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_SERVICE=${{ secrets.SMTP_SERVICE }}" >> .env
          echo "SMTP_MAIL=${{ secrets.SMTP_MAIL }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "VDOCIPHER_API_SECRET=${{ secrets.VDOCIPHER_API_SECRET }}" >> .env
          echo "STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: echo "Skipping tests for now"

      - name: Debug Secrets
        run: |
          echo "Checking if secrets are available..."
          if [[ -z "${{ secrets.RENDER_API_KEY }}" ]]; then
            echo "‚ùå RENDER_API_KEY is missing!"
            exit 1
          else
            echo "‚úÖ RENDER_API_KEY is set!"
          fi

          if [[ -z "${{ secrets.RENDER_SERVICE_ID }}" ]]; then
            echo "‚ùå RENDER_SERVICE_ID is missing!"
            exit 1
          else
            echo "‚úÖ RENDER_SERVICE_ID is set!"
          fi

          if [[ -z "${{ secrets.CLOUDINARY_NAME }}" ]]; then
            echo "‚ùå CLOUDINARY_NAME is missing!"
            exit 1
          else
            echo "‚úÖ CLOUDINARY_NAME is set!"
          fi

          if [[ -z "${{ secrets.CLOUDINARY_KEY }}" ]]; then
            echo "‚ùå CLOUDINARY_KEY is missing!"
            exit 1
          else
            echo "‚úÖ CLOUDINARY_KEY is set!"
          fi

      # - name: Validate all required secrets
      #   run: |
      #     missing=""

      #      if [ -z "${{ secrets.CLOUD_NAME }}" ]; then echo "‚ùå CLOUD_NAME is missing"; missing="yes"; fi
      #      if [ -z "${{ secrets.CLOUD_KEY }}" ]; then echo "‚ùå CLOUD_KEY is missing"; missing="yes"; fi

      #      if [ "$missing" = "yes" ]; then
      #        echo "üö® Exiting due to missing secrets."
      #        exit 1
      #      else
      #        echo "‚úÖ All required secrets are set."
      #      fi

      - name: Build Docker image
        run: docker build -t e-learning-server .

      - name: Run Docker container with GitHub Secrets
        run: |
          docker run --rm \
            --env-file .env \
            e-learning-server

      - name: Confirm Successful build
        if: success()
        run: echo "Build job success"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{secrets.RENDER_SERVICE_ID}}
          api-key: ${{secrets.RENDER_API_KEY}}

      - name: Check Deployment Response
        if: failure() # This will only run if the previous step fails
        run: |
          echo "‚ùå Deployment failed! Exiting..."
          exit 1

      - name: Confirm Deployment Success
        if: success() # This ensures it only runs on success
        run: echo "‚úÖ Deployment completed successfully!"
#       name: Automated CI/CD Pipeline

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     services:
#       redis:
#         image: redis:6
#         ports:
#           - 6379:6379
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: "18.x"

#       - name: Create .env file
#         run: |
#           echo "PORT=3000" >> .env
#           echo "REDIS_URL=redis://localhost:6379" >> .env
#           echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

#       - name: Install dependencies
#         run: npm install

#       - name: Run build
#         run: npm run build

#       - name: Run Docker container
#         run: |
#           docker build -t my-app .
#           docker run --rm \
#             --env-file .env \
#             my-app

#       - name: Confirm Successful Build
#         if: success()
#         run: echo "‚úÖ Build and container run completed"

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     permissions:
#       deployments: write

#     steps:
#       - name: Deploy to Render
#         uses: johnbeynon/render-deploy-action@v0.0.8
#         with:
#           service-id: ${{ secrets.RENDER_SERVICE_ID }}
#           api-key: ${{ secrets.RENDER_API_KEY }}

#       - name: Check Deployment Response
#         if: failure()
#         run: |
#           echo "‚ùå Deployment failed! Exiting..."
#           exit 1

#       - name: Confirm Deployment Success
#         if: success()
#         run: echo "‚úÖ Deployment completed successfully!"
#  -e PORT=${{ secrets.PORT }} \
#             -e ORIGIN=${{ secrets.ORIGIN }} \
#             -e NODE_ENV=${{ secrets.NODE_ENV }} \
#             -e DB_URL=${{ secrets.DB_URL }} \
#             -e CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }} \
#             -e CLOUDINARY_KEY=${{ secrets.CLOUDINARY_KEY }} \
#             -e CLOUDINARY_SECRET=${{ secrets.CLOUDINARY_SECRET }} \
#             -e REDIS_URL=${{ secrets.REDIS_URL }} \
#             -e ACTIVATION_SECRET=${{ secrets.ACTIVATION_SECRET }} \
#             -e ACCESS_TOKEN_SIGN_IN=${{ secrets.ACCESS_TOKEN_SIGN_IN }} \
#             -e REFRESH_TOKEN_SIGN_IN=${{ secrets.REFRESH_TOKEN_SIGN_IN }} \
#             -e ACCESS_TOKEN_EXPIRE=${{ secrets.ACCESS_TOKEN_EXPIRE }} \
#             -e REFRESH_TOKEN_EXPIRE=${{ secrets.REFRESH_TOKEN_EXPIRE }} \
#             -e SMTP_HOST=${{ secrets.SMTP_HOST }} \
#             -e SMTP_PORT=${{ secrets.SMTP_PORT }} \
#             -e SMTP_SERVICE=${{ secrets.SMTP_SERVICE }} \
#             -e SMTP_MAIL=${{ secrets.SMTP_MAIL }} \
#             -e SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }} \
#             -e VDOCIPHER_API_SECRET=${{ secrets.VDOCIPHER_API_SECRET }} \
#             -e STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }} \
#             -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
