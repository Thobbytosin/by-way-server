name: Automated CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Run code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.x"

      - name: Create .env file
        run: |
          echo "PORT==${{ secrets.PORT }}" >> .env
          echo "ORIGIN=${{ secrets.ORIGIN }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "CLOUDINARY_NAME=${{ secrets.CLOUDINARY_NAME }}" >> .env
          echo "CLOUDINARY_KEY=${{ secrets.CLOUDINARY_KEY }}" >> .env
          echo "CLOUDINARY_SECRET=${{ secrets.CLOUDINARY_SECRET }}" >> .env
          echo "ACTIVATION_SECRET=${{ secrets.ACTIVATION_SECRET }}" >> .env
          echo "ACCESS_TOKEN_SIGN_IN=${{ secrets.ACCESS_TOKEN_SIGN_IN }}" >> .env
          echo "REFRESH_TOKEN_SIGN_IN=${{ secrets.REFRESH_TOKEN_SIGN_IN }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE=${{ secrets.ACCESS_TOKEN_EXPIRE }}" >> .env
          echo "REFRESH_TOKEN_EXPIRE=${{ secrets.REFRESH_TOKEN_EXPIRE }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_SERVICE=${{ secrets.SMTP_SERVICE }}" >> .env
          echo "SMTP_MAIL=${{ secrets.SMTP_MAIL }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "VDOCIPHER_API_SECRET=${{ secrets.VDOCIPHER_API_SECRET }}" >> .env
          echo "STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: echo "Skipping tests for now"

      - name: Debug Secrets
        run: |
          echo "Checking if secrets are available..."
          if [[ -z "${{ secrets.RENDER_API_KEY }}" ]]; then
            echo "❌ RENDER_API_KEY is missing!"
            exit 1
          else
            echo "✅ RENDER_API_KEY is set!"
          fi

          if [[ -z "${{ secrets.RENDER_SERVICE_ID }}" ]]; then
            echo "❌ RENDER_SERVICE_ID is missing!"
            exit 1
          else
            echo "✅ RENDER_SERVICE_ID is set!"
          fi

          if [[ -z "${{ secrets.STRIPE_SECRET_KEY }}" ]]; then
            echo "❌ STRIPE_SECRET_KEY is missing!"
            exit 1
          else
            echo "✅ STRIPE_SECRET_KEY is set!"
          fi

          if [[ -z "${{ secrets.PORT}}" ]]; then
            echo "❌ PORT is missing!"
            exit 1
          else
            echo "✅ PORT is set!"
          fi

      - name: Build Docker image
        run: docker build -t e-learning-server .

      - name: Run Docker container with GitHub Secrets
        run: |
          echo "🚀 Starting Docker container..."
          container_id=$(docker run -d \
            -p 8000:8000 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PASS=${{ secrets.DB_PASS }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --health-cmd="curl -f http://localhost:8000/api/v1/health || exit 1" \
            --health-interval=5s \
            --health-retries=3 \
            e-learning-server)

          echo "🕒 Waiting for container to boot up..."
          sleep 10

          echo "📦 Container ID: $container_id"

          echo "🔍 Checking logs..."
          logs=$(docker logs "$container_id")
          echo "$logs"

          echo "🔍 Final Container Status: $container_status"
          echo "📜 Last 50 Log Lines:"
          echo "$logs"

          if [[ "$container_status" == "healthy" ]]; then
            echo "✅ Container passed health checks!"
            docker stop $container_id
          else
            echo "❌ Container failed with status: $container_status"
            echo "🛑 Problem areas detected:"
            grep -E -i "error|fail|exception|timeout|refused" <<< "$logs" || echo "No explicit errors found in logs"
            docker stop $container_id
            exit 1
          fi

      - name: Confirm Successful build
        if: success()
        run: echo "Build job success"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{secrets.RENDER_SERVICE_ID}}
          api-key: ${{secrets.RENDER_API_KEY}}

      - name: Check Deployment Response
        if: failure() # This will only run if the previous step fails
        run: |
          echo "❌ Deployment failed! Exiting..."
          exit 1

      - name: Confirm Deployment Success
        if: success() # This ensures it only runs on success
        run: echo "✅ Deployment completed successfully!"
